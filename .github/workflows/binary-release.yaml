# TODO: Add codeQL to check for security vulnerabilities via platform.
# TODO: only release on merge with main branch
name: Build and Release

permissions:
  id-token: write
  contents: write

on:
  push:
    branches:
      - main
#      - release/*  # Uncomment to release on any branch starting with `release/`
    paths-ignore:  # Ignore certain paths from triggering the pipeline
      - 'docs/**'
      - 'readme.md'
      - '.gitignore'
      - 'manifests/**'
#      - '.github/**'
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history to use GitVersion
          persist-credentials: true

      # 2: Call our custom `GitVersion action` to tag the repo
      - name: Tag with GitVersion
        id: gitversion
        uses: michielvha/gitversion-tag-action@v5
        with:
          configFilePath: gitversion.yml  # Path to your GitVersion config file

#      - name: Disable Go toolchain mode # we are setting goversion in go.mod and this is causing toolchain errors, we are setting env to local and defining it in the pipeline in our case to fix the warnings.
#        run: echo "GOTOOLCHAIN=local" >> $GITHUB_ENV

      # 3: Build and release binaries using GoReleaser, maybe move to seperate workflow
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'  # Specify the Go version

      # 4: Install Linter (golangci-lint)
      # https://github.com/golangci/golangci-lint-action
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8

#      # TODO: Run Unit Tests with Coverage
#      - name: Run Tests with gotestsum
#        run: |
#          go install gotest.tools/gotestsum@latest
#          gotestsum --format testname -- -v -p 10 -count 1 -coverprofile=cover.out ./..

      # 5: Cache GoReleaser installation
      - name: Cache GoReleaser
        id: goreleaser-cache
        uses: actions/cache@v4
        with:
          path: ~/.goreleaser
          key: goreleaser-${{ runner.os }}-latest
          restore-keys: goreleaser-${{ runner.os }}-

      # 6: Import PGP Key for signing
      - name: Import PGP Private Key
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --reload gpg-agent
          echo "${{ secrets.PGP_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format=long
        env:
          GPG_TTY: /dev/null
      # 7: Extract PGP Fingerprint
      - name: Extract and Set GPG Fingerprint
        run: |
          echo "ðŸ”¹ Extracting GPG Fingerprint..."
          export GPG_FINGERPRINT=$(gpg --list-secret-keys --keyid-format=long | grep sec | awk '{print $2}' | awk -F'/' '{print $2}')
          echo "GPG_FINGERPRINT=${GPG_FINGERPRINT}" >> $GITHUB_ENV
          echo "Using fingerprint: $GPG_FINGERPRINT"

#      - name: Debug Environment Variables
#        run: env | sort

      # 8: Run GoReleaser to build and release binaries
      # https://github.com/goreleaser/goreleaser-action
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.EDGECTL_GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ env.GPG_FINGERPRINT }}
          
